function myFunction() {

  var ts = new Date().getTime();
  
  var configSheet = SpreadsheetApp.getActiveSheet();
  if(configSheet.getName() != 'CONFIG') return;

  var config = configSheet.getRange(1, 2, configSheet.getMaxRows(), 1).getValues();

  var INPUT_SHEET        = config[0][0];
  var OUTPUT_SHEET       = config[1][0];

  var HANDLE_COL         = 0;  
  var BODY_COL           = 1;  
  var COLOR_COL          = 2;
  var SIZE_COL           = 3;
  var SKU_COL            = 4;
  var WEIGHT_COL         = 5;
  var PRICE_COL          = 6;
  var IMAGE_COL          = 7;
  
  var VENDOR             = config[10][0];
  var TYPE               = config[11][0];
  var TAG                = config[12][0];
  var CUSTOM_DUTY        = config[13][0];
  var GST_RATE           = config[14][0];
  var PUSH_BUTTON        = config[15][0];
  var INDEX_PUSH_BUTTON  = 16;
  
  if(PUSH_BUTTON != 'START') return;

  
  // Updating config - IN_PROGRESS
  configSheet.getRange(INDEX_PUSH_BUTTON, 2, 4, 1).setValues([['IN_PROGRESS'], [0], [0], [0]]);


  // Input Sheet  
  var inputSheet = SpreadsheetApp.getActive().getSheetByName(INPUT_SHEET);
  
  var numRows = inputSheet.getMaxRows();
  var numCols = inputSheet.getMaxColumns();
  
  var input = inputSheet.getRange(1, 1, numRows, numCols).getValues();

  
  // Output Sheet
  var outputSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(OUTPUT_SHEET);
  outputSheet.clear();
  
  var headRow = [
    'Handle',
    'Title',
    'Body (HTML)',
    'Vendor',
    'Type',
    'Tags',
    'Published',
    'Option1 Name',
    'Option1 Value',
    'Option2 Name',
    'Option2 Value',
    'Option3 Name',
    'Option3 Value',
    'Variant SKU',
    'Variant Grams',
    'Variant Inventory Tracker',
    'Variant Inventory Qty',
    'Variant Inventory Policy',
    'Variant Fulfillment Service',
    'Variant Price',
    'Variant Compare At Price',
    'Variant Requires Shipping',
    'Variant Taxable',
    'Variant Barcode',
    'Image Src',
    'Image Position'
    ];
  outputSheet.getRange(1, 1, 1, headRow.length).setValues([headRow]);

  var count = 1;
  
  for(var i = 1; i < input.length; i++) { // Input Rows Loop
    
    var row = input[i];
    if(! row[0]) break; // Skip empty rows
    var output = [];

    var colors = row[COLOR_COL].trim().split(',');
    for(var c = 0; c < colors.length; c++) { // Color Loop
      var color = colors[c].trim();
      if(! color) continue;
      
      var sizes = row[SIZE_COL].trim().split(',');
      for(var s = 0; s < sizes.length; s++) { // Size Loop
        var size = sizes[s].trim();
        if(! size) continue;
        
        var modes = ['Ship', 'Air']
        for(var m = 0; m < modes.length; m++) { // Delivery Mode Loop
          var mode = modes[m];

          var newRow = [];
          for(var j = 0; j < row.length; j++) {
            if(j == HANDLE_COL) {
              newRow.push(row[j]);
              newRow.push(row[j]); // Title
            } else if(j == BODY_COL) {
              newRow.push(row[j]);
              newRow.push(VENDOR);
              newRow.push(TYPE);
              newRow.push(TAG);
              newRow.push('FALSE'); // Published
            } else if(j == COLOR_COL) {
              newRow.push('Delivery Type'); // Option1 Name
              newRow.push(mode == 'Air' ? 'ETA 14 Days' : 'ETA 40 Days');
              newRow.push('Color'); // Option2 Name
              newRow.push(color);
            } else if(j == SIZE_COL) {
              newRow.push('Size'); // Option3 Name
              newRow.push(size);
            } else if(j == SKU_COL) {
              newRow.push((row[j] + '_' + color + '_' + size + (mode == 'Air' ? '_eta14days' : '_eta40days')).replace(/ /gi, '_'));
            } else if(j == WEIGHT_COL) {
              newRow.push(row[j]);
              newRow.push(null);     // Variant Inventory Tracker
              newRow.push('10000');  // Variant Inventory Qty
              newRow.push('deny');   // Variant Inventory Policy
              newRow.push('manual'); // Variant Fulfillment Service
            } else if(j == PRICE_COL) {
              var price = getLandedPrice(row[PRICE_COL], row[WEIGHT_COL], CUSTOM_DUTY, GST_RATE, mode);
              newRow.push(Math.ceil(price));
              newRow.push(Math.ceil(price/0.6));
              newRow.push('TRUE');  // Variant Requires Shipping
              newRow.push('FALSE'); // Variant Taxable
              newRow.push(null);
            } else if(j == IMAGE_COL) {
              newRow.push(row[j]);
              newRow.push(1);
//            } else if(j >= IMAGE_COL) {
//              if(! row[j]) break;
//              var imgRow = [row[HANDLE_COL]];
//              for(var k = 1; k < newRow.length - 2; k++) imgRow[k] = null;
//              imgRow[newRow.length - 2] = row[j];
//              imgRow[newRow.length - 1] = j - IMAGE_COL + 1;
//              output.push(imgRow);
            }
          
          }
          
          output.push(newRow);
        
        } // END: Delivery Mode Loop
        
      } // END: Size Loop
      
    } // END: Color Loop


    for(var j = IMAGE_COL + 1; row[j]; j++) {
      var imgRow = [row[HANDLE_COL]];
      for(var k = 1; k < headRow.length - 2; k++) imgRow[k] = null;
      imgRow[headRow.length - 2] = row[j];
      imgRow[headRow.length - 1] = j - IMAGE_COL + 1;
      output.push(imgRow);
    }
              
    outputSheet.getRange(count + 1, 1, output.length, headRow.length).setValues(output);
    count = count + output.length;
    configSheet.getRange(INDEX_PUSH_BUTTON, 2, 4, 1).setValues([['IN_PROGRESS'], [i], [count], [(new Date().getTime() - ts)/1000 + 's']]);

  } // END: Input Rows Loop
  
  configSheet.getRange(INDEX_PUSH_BUTTON, 2, 1, 1).setValues([['DONE']]);
  
}


function getLandedPrice(price, weight, customDuty, gst, mode) {
  
  var inrPrice = price * 10.5;
  var fni = mode == 'Air'
      ? Math.max(weight, 400) / 1000 * 300 // Air Freight & Insurance
      : weight / 1000 * 40;                // Other (Ship) Freight & Insurance
  var landing = 0.01 * (inrPrice + fni);   // Landing Charges

  var cif = inrPrice + fni + landing;      // Cost + Insurance + Freight
  var custom = cif * customDuty/100 * 1.1; // Basic Custom Duty + Cess
  var igst = (cif + custom) * gst/100;     // GST
  
  var commission = 0.1 * inrPrice;         // Our Commission
  
  return cif + custom + igst + commission;
  
}
